{"version":3,"file":"index-umd.min.js","sources":["../index.js"],"sourcesContent":["/**\n *  Create a random number generator. Values will be in the half-open interval\n *  [0, 1)\n *  @param {number} [seed]\n *  @returns {function(): number}\n */\nexport function uniformGenerator(seed) {\n    /* eslint-disable-next-line compat/compat */\n    seed = seed || Date.now();\n\n    return () => {\n        seed = Math.sin(seed) * 10000;\n        return seed - Math.floor(seed);\n    };\n}\n\n/**\n *  Create a random number generator. Values will be in the half-open interval\n *  [min, max)\n *  @param {number} min\n *  @param {number} max\n *  @param {number} [seed]\n *  @returns {function(): number}\n */\nexport function uniformGeneratorRange(min, max, seed) {\n    return toRange(uniformGenerator(seed), min, max);\n}\n\n/**\n *  Return a Gaussian distrubuted random number\n *  @param {number} [seed]\n *  @returns {function(): number}\n */\nexport function gaussianGenerator(seed) {\n    return toGaussian(uniformGenerator(seed));\n}\n\n/**\n *  Return a Gaussian distributed random number with the specified average and\n *  variance applied\n *  @param {number} average\n *  @param {number} variance\n *  @param {number} [seed]\n *  @returns {function(): number}\n */\nexport function gaussianGeneratorRange(average, variance, seed) {\n    const min = average - variance;\n    const max = average + variance;\n\n    return toRange(gaussianGenerator(seed), min, max);\n}\n\n/**\n *  Scale random to a specified range. This will return values in the half-open\n *  interval [min, max)\n *\n *  @param {function(): number} random\n *  @param {number} min\n *  @param {number} max\n *  @returns {function(): number}\n */\nexport function toRange(random, min, max) {\n    if (min > max) {\n        [min, max] = [max, min];\n    }\n\n    const range = max - min;\n\n    return () => random() * range + min;\n}\n\n/**\n *  Return a Gaussian distrubuted random number\n *  @param {function(): number} random\n *  @returns {function(): number}\n */\nexport function toGaussian(random) {\n    return () => {\n        let v1, v2, s;\n\n        while (true) {\n            v1 = 2 * random() - 1;\n            v2 = 2 * random() - 1;\n            s = v1 * v1 + v2 * v2;\n\n            if (s !== 0 && s < 1) {\n                break;\n            }\n        }\n\n        s = Math.sqrt((-2 * Math.log(s)) / s);\n\n        return v1 * s;\n    };\n}\n"],"names":["uniformGenerator","seed","Date","now","Math","sin","floor","gaussianGenerator","toGaussian","toRange","random","min","max","range","v1","v2","s","sqrt","log","average","variance"],"mappings":"sMAMO,SAASA,EAAiBC,UAE7BA,EAAOA,GAAQC,KAAKC,MAEb,kBACHF,EAAwB,IAAjBG,KAAKC,IAAIJ,IACFG,KAAKE,MAAML,IAqB1B,SAASM,EAAkBN,UACvBO,EAAWR,EAAiBC,IA2BhC,SAASQ,EAAQC,EAAQC,EAAKC,MAC7BD,EAAMC,EAAK,OACE,CAACA,EAAKD,GAAlBA,OAAKC,WAGJC,EAAQD,EAAMD,SAEb,kBAAMD,IAAWG,EAAQF,GAQ7B,SAASH,EAAWE,UAChB,mBACCI,EAAIC,EAAIC,IAOE,KAFVA,GAFAF,EAAK,EAAIJ,IAAW,GAEXI,GADTC,EAAK,EAAIL,IAAW,GACDK,IAEJC,EAAI,YAOhBF,GAFPE,EAAIZ,KAAKa,MAAO,EAAIb,KAAKc,IAAIF,GAAMA,oDA7CpC,SAAgCG,EAASC,EAAUnB,OAChDU,EAAMQ,EAAUC,EAChBR,EAAMO,EAAUC,SAEfX,EAAQF,EAAkBN,GAAOU,EAAKC,4EAzB1C,SAA+BD,EAAKC,EAAKX,UACrCQ,EAAQT,EAAiBC,GAAOU,EAAKC"}